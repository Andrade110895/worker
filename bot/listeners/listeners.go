// Code generated by /tools/cmd/generatelisteners.go; DO NOT EDIT.
//go:generate go run ../../tools/cmd/generatelisteners.go

package listeners

import (
    "encoding/json"
    "fmt"
    "github.com/TicketsBot/worker"
    "github.com/getsentry/sentry-go"
    "github.com/rxdn/gdl/gateway/payloads"
    "github.com/rxdn/gdl/gateway/payloads/events"
)

var (
    
    ChannelCreateListeners = []func(*worker.Context, events.ChannelCreate){}
    ChannelDeleteListeners = []func(*worker.Context, events.ChannelDelete){}
    ChannelPinsUpdateListeners = []func(*worker.Context, events.ChannelPinsUpdate){}
    ChannelUpdateListeners = []func(*worker.Context, events.ChannelUpdate){}
    GuildBanAddListeners = []func(*worker.Context, events.GuildBanAdd){}
    GuildBanRemoveListeners = []func(*worker.Context, events.GuildBanRemove){}
    GuildCreateListeners = []func(*worker.Context, events.GuildCreate){}
    GuildDeleteListeners = []func(*worker.Context, events.GuildDelete){}
    GuildEmojisUpdateListeners = []func(*worker.Context, events.GuildEmojisUpdate){}
    GuildIntegrationsUpdateListeners = []func(*worker.Context, events.GuildIntegrationsUpdate){}
    GuildMemberAddListeners = []func(*worker.Context, events.GuildMemberAdd){}
    GuildMemberRemoveListeners = []func(*worker.Context, events.GuildMemberRemove){}
    GuildMemberUpdateListeners = []func(*worker.Context, events.GuildMemberUpdate){}
    GuildMembersChunkListeners = []func(*worker.Context, events.GuildMembersChunk){}
    GuildRoleCreateListeners = []func(*worker.Context, events.GuildRoleCreate){}
    GuildRoleDeleteListeners = []func(*worker.Context, events.GuildRoleDelete){}
    GuildRoleUpdateListeners = []func(*worker.Context, events.GuildRoleUpdate){}
    GuildUpdateListeners = []func(*worker.Context, events.GuildUpdate){}
    InvalidSessionListeners = []func(*worker.Context, events.InvalidSession){}
    InviteCreateListeners = []func(*worker.Context, events.InviteCreate){}
    InviteDeleteListeners = []func(*worker.Context, events.InviteDelete){}
    MessageCreateListeners = []func(*worker.Context, events.MessageCreate){}
    MessageDeleteListeners = []func(*worker.Context, events.MessageDelete){}
    MessageDeleteBulkListeners = []func(*worker.Context, events.MessageDeleteBulk){}
    MessageReactionAddListeners = []func(*worker.Context, events.MessageReactionAdd){}
    MessageReactionRemoveListeners = []func(*worker.Context, events.MessageReactionRemove){}
    MessageReactionRemoveAllListeners = []func(*worker.Context, events.MessageReactionRemoveAll){}
    MessageReactionRemoveEmojiListeners = []func(*worker.Context, events.MessageReactionRemoveEmoji){}
    MessageUpdateListeners = []func(*worker.Context, events.MessageUpdate){}
    PresenceUpdateListeners = []func(*worker.Context, events.PresenceUpdate){}
    ReadyListeners = []func(*worker.Context, events.Ready){}
    ReconnectListeners = []func(*worker.Context, events.Reconnect){}
    ResumedListeners = []func(*worker.Context, events.Resumed){}
    ThreadCreateListeners = []func(*worker.Context, events.ThreadCreate){}
    ThreadDeleteListeners = []func(*worker.Context, events.ThreadDelete){}
    ThreadListSyncListeners = []func(*worker.Context, events.ThreadListSync){}
    ThreadMemberUpdateListeners = []func(*worker.Context, events.ThreadMemberUpdate){}
    ThreadMembersUpdateListeners = []func(*worker.Context, events.ThreadMembersUpdate){}
    ThreadUpdateListeners = []func(*worker.Context, events.ThreadUpdate){}
    TypingStartListeners = []func(*worker.Context, events.TypingStart){}
    UserUpdateListeners = []func(*worker.Context, events.UserUpdate){}
    VoiceServerUpdateListeners = []func(*worker.Context, events.VoiceServerUpdate){}
    VoiceStateUpdateListeners = []func(*worker.Context, events.VoiceStateUpdate){}
    WebhooksUpdateListeners = []func(*worker.Context, events.WebhooksUpdate){}
)

func HandleEvent(c *worker.Context, span *sentry.Span, payload payloads.Payload) error {
    if payload.Opcode != 0 { // Dispatch
        return fmt.Errorf("HandleEvent called with non-dispatch op-code: %d", payload.Opcode)
    }

    switch events.EventType(payload.EventName) {
    
    case events.CHANNEL_CREATE:
        var event events.ChannelCreate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ChannelCreateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.CHANNEL_DELETE:
        var event events.ChannelDelete
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ChannelDeleteListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.CHANNEL_PINS_UPDATE:
        var event events.ChannelPinsUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ChannelPinsUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.CHANNEL_UPDATE:
        var event events.ChannelUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ChannelUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_BAN_ADD:
        var event events.GuildBanAdd
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildBanAddListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_BAN_REMOVE:
        var event events.GuildBanRemove
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildBanRemoveListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_CREATE:
        var event events.GuildCreate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildCreateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_DELETE:
        var event events.GuildDelete
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildDeleteListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_EMOJIS_UPDATE:
        var event events.GuildEmojisUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildEmojisUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_INTEGRATIONS_UPDATE:
        var event events.GuildIntegrationsUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildIntegrationsUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_MEMBER_ADD:
        var event events.GuildMemberAdd
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildMemberAddListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_MEMBER_REMOVE:
        var event events.GuildMemberRemove
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildMemberRemoveListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_MEMBER_UPDATE:
        var event events.GuildMemberUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildMemberUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_MEMBERS_CHUNK:
        var event events.GuildMembersChunk
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildMembersChunkListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_ROLE_CREATE:
        var event events.GuildRoleCreate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildRoleCreateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_ROLE_DELETE:
        var event events.GuildRoleDelete
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildRoleDeleteListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_ROLE_UPDATE:
        var event events.GuildRoleUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildRoleUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.GUILD_UPDATE:
        var event events.GuildUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range GuildUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.INVALID_SESSION:
        var event events.InvalidSession
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range InvalidSessionListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.INVITE_CREATE:
        var event events.InviteCreate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range InviteCreateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.INVITE_DELETE:
        var event events.InviteDelete
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range InviteDeleteListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.MESSAGE_CREATE:
        var event events.MessageCreate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range MessageCreateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.MESSAGE_DELETE:
        var event events.MessageDelete
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range MessageDeleteListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.MESSAGE_DELETE_BULK:
        var event events.MessageDeleteBulk
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range MessageDeleteBulkListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.MESSAGE_REACTION_ADD:
        var event events.MessageReactionAdd
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range MessageReactionAddListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.MESSAGE_REACTION_REMOVE:
        var event events.MessageReactionRemove
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range MessageReactionRemoveListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.MESSAGE_REACTION_REMOVE_ALL:
        var event events.MessageReactionRemoveAll
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range MessageReactionRemoveAllListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.MESSAGE_REACTION_REMOVE_EMOJI:
        var event events.MessageReactionRemoveEmoji
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range MessageReactionRemoveEmojiListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.MESSAGE_UPDATE:
        var event events.MessageUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range MessageUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.PRESENCE_UPDATE:
        var event events.PresenceUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range PresenceUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.READY:
        var event events.Ready
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ReadyListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.RECONNECT:
        var event events.Reconnect
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ReconnectListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.RESUMED:
        var event events.Resumed
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ResumedListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.THREAD_CREATE:
        var event events.ThreadCreate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ThreadCreateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.THREAD_DELETE:
        var event events.ThreadDelete
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ThreadDeleteListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.THREAD_LIST_SYNC:
        var event events.ThreadListSync
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ThreadListSyncListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.THREAD_MEMBER_UPDATE:
        var event events.ThreadMemberUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ThreadMemberUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.THREAD_MEMBERS_UPDATE:
        var event events.ThreadMembersUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ThreadMembersUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.THREAD_UPDATE:
        var event events.ThreadUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range ThreadUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.TYPING_START:
        var event events.TypingStart
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range TypingStartListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.USER_UPDATE:
        var event events.UserUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range UserUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.VOICE_SERVER_UPDATE:
        var event events.VoiceServerUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range VoiceServerUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.VOICE_STATE_UPDATE:
        var event events.VoiceStateUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range VoiceStateUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    case events.WEBHOOKS_UPDATE:
        var event events.WebhooksUpdate
        if err := json.Unmarshal(payload.Data, &event); err != nil {
            return err
        }

        for _, listener := range WebhooksUpdateListeners {
            go func() {
                listener(c, event)
                span.Finish()
            }()
        }
    
    default:
        return fmt.Errorf("Unknown event type: %s", payload.EventName)
    }

    return nil
}
